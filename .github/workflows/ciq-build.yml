name: CIQ Build

on:
  workflow_dispatch:
  push:
    paths:
      - "source/**"
      - "resources/**"
      - "manifest.xml"
      - "tools/**"
      - ".github/workflows/ciq-build.yml"
  pull_request:
    paths:
      - "source/**"
      - "resources/**"
      - "manifest.xml"
      - "tools/**"

permissions:
  contents: read
  actions: read
  checks: write

env:
  JAVA_VERSION: "17"
  OUTPUT_NAME: "OWSwim_VA4"
  MIN_SDK_VERSION: "3.1.0"
  SUPPORTED_DEVICES: "vivoactive4,vivoactive4s"
  COMPILER_VERSION: "8.1.1"
  JAR_NAME: "monkeybrains-8.1.1.jar"
  BUILD_MEMORY: "-Xms1g -Xmx2g"

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check required files exist
        shell: bash
        run: |
          set -euo pipefail
          required_files=(
            "manifest.xml"
            "tools/${JAR_NAME}"
            "tools/api.db"
            "tools/api.mir"
            "tools/compilerInfo.xml"
          )
          missing=()
          for f in "${required_files[@]}"; do
            [[ -s "$f" ]] || missing+=("$f")
          done
          if (( ${#missing[@]} )); then
            echo "‚ùå Fichiers manquants :"
            printf '  - %s\n' "${missing[@]}"
            exit 1
          fi
          echo "‚úÖ Tous les fichiers requis sont pr√©sents."

      - name: Validate manifest.xml syntax
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
import sys, xml.etree.ElementTree as ET
try:
    ET.parse('manifest.xml')
    print('‚úÖ manifest.xml est valide')
except ET.ParseError as e:
    print(f'‚ùå manifest.xml invalide: {e}')
    sys.exit(1)
PY

  build:
    name: Build Connect IQ Application
    runs-on: ubuntu-latest
    needs: validate
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Normalize encodings & create jungle
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          files=(manifest.xml resources/**/*.xml source/**/*.mc)
          for f in "${files[@]}"; do
            [[ -f "$f" ]] || continue
            awk 'NR==1{sub(/^\xef\xbb\xbf/,"")}1' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
          done
          printf 'project.manifest = manifest.xml\nbase.sourcePath = source\nbase.resourcePath = resources\n' > monkey.jungle
          mkdir -p bin

      - name: Developer key from secret
        env:
          CIQ_DEV_KEY_B64: ${{ secrets.CIQ_DEV_KEY_B64 }}
        run: |
          set -euo pipefail
          [[ -n "${CIQ_DEV_KEY_B64:-}" ]] || { echo "Missing CIQ_DEV_KEY_B64 secret"; exit 1; }
          echo "$CIQ_DEV_KEY_B64" | base64 -d > developer_key
          chmod 600 developer_key
          test -s developer_key

      - name: Force VA4/VA4s in manifest
        run: |
          set -euo pipefail
          sed -i 's/minSdkVersion="[^"]*"/minSdkVersion="'${MIN_SDK_VERSION}'"/' manifest.xml
          devices_xml=""
          IFS=',' read -ra DEVICES <<< "${SUPPORTED_DEVICES}"
          for d in "${DEVICES[@]}"; do devices_xml+="<iq:product id=\"${d}\"/>"; done
          perl -0777 -pe "s|<iq:products>.*?</iq:products>|<iq:products>${devices_xml}</iq:products>|s" -i manifest.xml
          grep -n 'vivoactive4' manifest.xml || true

      - name: Build (use only -f jungle; DO NOT pass -m)
        working-directory: tools
        run: |
          set -euxo pipefail
          JAR="$PWD/${JAR_NAME}"
          ADB="$PWD/api.db"
          AMIR="$PWD/api.mir"
          COMP="$PWD/compilerInfo.xml"
          JUNGLE="$GITHUB_WORKSPACE/monkey.jungle"
          OUT="$GITHUB_WORKSPACE/bin/${OUTPUT_NAME}.iq"
          KEY="$GITHUB_WORKSPACE/developer_key"

          # Sanity checks
          for f in "$JAR" "$ADB" "$AMIR" "$COMP" "$JUNGLE" "$KEY"; do [[ -s "$f" ]]; done

          echo "üöÄ Compilation via jungle (sans -m)‚Ä¶"
          # IMPORTANT : pas de -m ici (incompatible avec -f)
          java $BUILD_MEMORY -Dfile.encoding=UTF-8 -jar "$JAR" \
            -a "$ADB" -b "$AMIR" \
            -f "$JUNGLE" \
            -o "$OUT" \
            -y "$KEY" \
            -e -w

          test -s "$OUT"

      - name: Validate generated .iq
        run: |
          set -euo pipefail
          IQ="bin/${OUTPUT_NAME}.iq"
          [[ -s "$IQ" ]] || { echo "‚ùå .iq manquant"; exit 1; }
          file "$IQ" | grep -qi zip || { echo "‚ùå .iq non-zip"; exit 1; }
          unzip -t "$IQ" >/dev/null

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: bin/*.iq
          retention-days: 30
