name: CIQ Build

on:
  workflow_dispatch:
  push:
    paths:
      - "source/**"
      - "resources/**"
      - "manifest.xml"
      - "tools/**"
      - ".github/workflows/ciq-build.yml"
  pull_request:
    paths:
      - "source/**"
      - "resources/**"
      - "manifest.xml"
      - "tools/**"

env:
  # Variables d'environnement globales
  JAVA_VERSION: "17"
  MIN_SDK_VERSION: "3.1.0"
  OUTPUT_NAME: "OWSwim_VA4"

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required files
        run: |
          set -euo pipefail
          
          # V√©rifier les fichiers requis
          required_files=(
            "manifest.xml"
            "tools/monkeybrains-8.1.1.jar"
            "tools/api.db"
            "tools/api.mir"
            "tools/compilerInfo.xml"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done
          
          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "‚ùå Fichiers manquants:"
            printf "  - %s\n" "${missing_files[@]}"
            exit 1
          fi
          
          echo "‚úÖ Tous les fichiers requis sont pr√©sents"

      - name: Validate manifest.xml syntax
        run: |
          set -euo pipefail
          
          # Validation XML avec Python (plus rapide que l'installation d'xmllint)
          python3 -c "
          import xml.etree.ElementTree as ET
          import sys
          try:
              ET.parse('manifest.xml')
              print('‚úÖ manifest.xml est valide')
          except ET.ParseError as e:
              print(f'‚ùå manifest.xml contient des erreurs de syntaxe XML: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'‚ùå Erreur lors de la validation: {e}')
              sys.exit(1)
          "

  build:
    name: Build Connect IQ Application
    runs-on: ubuntu-latest
    needs: validate
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          # Pas de cache Gradle car Connect IQ n'utilise pas Gradle

      - name: Cache Connect IQ tools
        uses: actions/cache@v4
        with:
          path: tools/
          key: ciq-tools-${{ hashFiles('tools/*.jar', 'tools/*.db', 'tools/*.mir') }}
          restore-keys: |
            ciq-tools-

      - name: Normalize file encodings
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          
          echo "üîß Normalisation des encodages..."
          files=(manifest.xml resources/**/*.xml source/**/*.mc)
          normalized_count=0
          
          for f in "${files[@]}"; do
            [[ -f "$f" ]] || continue
            
            # Supprimer le BOM UTF-8 si pr√©sent et normaliser
            if awk 'NR==1{sub(/^\xef\xbb\xbf/,"")}1' "$f" > "$f.tmp"; then
              if ! cmp -s "$f" "$f.tmp"; then
                mv "$f.tmp" "$f"
                ((normalized_count++))
                echo "  ‚úì Normalis√©: $f"
              else
                rm "$f.tmp"
              fi
            else
              echo "  ‚ö†Ô∏è  Erreur lors de la normalisation: $f"
            fi
          done
          
          echo "üìä $normalized_count fichier(s) normalis√©(s)"

      - name: Generate monkey.jungle configuration
        run: |
          set -euo pipefail
          
          echo "üêí G√©n√©ration de monkey.jungle..."
          cat > monkey.jungle << 'EOF'
          # Configuration g√©n√©r√©e automatiquement
          project.manifest = manifest.xml
          base.sourcePath = source
          base.resourcePath = resources
          EOF
          
          echo "‚úÖ monkey.jungle cr√©√©:"
          cat monkey.jungle

      - name: Create build directory
        run: |
          mkdir -p bin
          echo "üìÅ R√©pertoire bin cr√©√©"

      - name: Setup developer key
        env:
          CIQ_DEV_KEY_B64: ${{ secrets.CIQ_DEV_KEY_B64 }}
        run: |
          set -euo pipefail
          
          if [[ -z "${CIQ_DEV_KEY_B64:-}" ]]; then
            echo "‚ùå Secret CIQ_DEV_KEY_B64 manquant"
            echo "Veuillez ajouter votre cl√© de d√©veloppeur Connect IQ encod√©e en base64"
            exit 1
          fi
          
          echo "üîë Configuration de la cl√© de d√©veloppeur..."
          echo "$CIQ_DEV_KEY_B64" | base64 -d > developer_key
          chmod 600 developer_key
          
          if [[ ! -s developer_key ]]; then
            echo "‚ùå La cl√© de d√©veloppeur est vide apr√®s d√©codage"
            exit 1
          fi
          
          echo "‚úÖ Cl√© de d√©veloppeur configur√©e"

      - name: Configure manifest for target devices
        run: |
          set -euo pipefail
          
          echo "‚öôÔ∏è  Configuration du manifest pour VA4/VA4s..."
          
          # Backup du manifest original
          cp manifest.xml manifest.xml.backup
          
          # Mise √† jour de la version SDK minimale
          if ! sed -i "s/minSdkVersion=\"[^\"]*\"/minSdkVersion=\"${MIN_SDK_VERSION}\"/" manifest.xml; then
            echo "‚ùå Erreur lors de la mise √† jour de minSdkVersion"
            exit 1
          fi
          
          # Mise √† jour des produits cibles
          if ! perl -0777 -pe 's|<iq:products>.*?</iq:products>|<iq:products><iq:product id="vivoactive4"/><iq:product id="vivoactive4s"/></iq:products>|s' -i manifest.xml; then
            echo "‚ùå Erreur lors de la mise √† jour des produits"
            exit 1
          fi
          
          # V√©rification des modifications
          if grep -q 'vivoactive4' manifest.xml; then
            echo "‚úÖ Manifest configur√© pour vivoactive4/vivoactive4s"
            echo "üìã Produits cibles:"
            grep -o 'vivoactive4s\?' manifest.xml | sort -u | sed 's/^/  - /'
          else
            echo "‚ö†Ô∏è  Les produits cibles n'ont pas √©t√© trouv√©s dans le manifest"
          fi

      - name: Generate project info
        working-directory: tools
        run: |
          set -euo pipefail
          
          echo "üìù G√©n√©ration de projectInfo.xml..."
          
          # G√©n√©ration avec namespace Connect IQ appropri√©
          cat > projectInfo.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <projectInfo xmlns="http://www.garmin.com/xml/connectiq" version="1.3">
            <environment>
              <apiDb path="api.db"/>
              <apiMir path="api.mir"/>
              <compilerInfo path="compilerInfo.xml"/>
            </environment>
            <application>
              <entry filename="../manifest.xml"/>
              <languages primary="eng"/>
              <permissions/>
              <products>
                <product id="vivoactive4"/>
                <product id="vivoactive4s"/>
              </products>
            </application>
          </projectInfo>
          EOF
          
          # V√©rification de la validit√© XML avec Python
          python3 -c "
          import xml.etree.ElementTree as ET
          import sys
          try:
              tree = ET.parse('projectInfo.xml')
              root = tree.getroot()
              # V√©rifier les √©l√©ments requis
              env = root.find('.//{http://www.garmin.com/xml/connectiq}environment')
              app = root.find('.//{http://www.garmin.com/xml/connectiq}application')
              if env is None or app is None:
                  print('‚ùå Structure XML manquante dans projectInfo.xml')
                  sys.exit(1)
              print('‚úÖ projectInfo.xml g√©n√©r√© avec succ√®s')
          except ET.ParseError as e:
              print(f'‚ùå projectInfo.xml g√©n√©r√© invalide: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'‚ùå Erreur lors de la validation: {e}')
              sys.exit(1)
          "

        working-directory: tools
        run: |
          set -euxo pipefail
          
          echo "üî® Compilation de l'application Connect IQ..."
          
          # Variables pour les chemins
          JAR="$PWD/monkeybrains-8.1.1.jar"
          PINFO="$PWD/projectInfo.xml"
          JUNGLE="$GITHUB_WORKSPACE/monkey.jungle"
          OUT="$GITHUB_WORKSPACE/bin/${OUTPUT_NAME}.iq"
          KEY="$GITHUB_WORKSPACE/developer_key"
          
          # V√©rification finale des fichiers requis
          required_files=("$JAR" "$PINFO" "$PWD/api.db" "$PWD/api.mir" "$PWD/compilerInfo.xml" "$KEY" "$JUNGLE")
          for file in "${required_files[@]}"; do
            if [[ ! -s "$file" ]]; then
              echo "‚ùå Fichier requis manquant ou vide: $file"
              exit 1
            fi
          done
          
          echo "üîç Diagnostic du projectInfo.xml:"
          echo "üìè Taille: $(stat -c%s "$PINFO") bytes"
          echo "üìÑ Contenu:"
          cat -n "$PINFO"
          echo ""
          
          # Compilation avec gestion d'erreur am√©lior√©e
          echo "üöÄ D√©marrage de la compilation avec projectInfo.xml..."
          
          if ! java -Xms1g -Xmx2g -Dfile.encoding=UTF-8 -jar "$JAR" \
            -a "$PWD/api.db" \
            -b "$PWD/api.mir" \
            -p "$PINFO" \
            -f "$JUNGLE" \
            -o "$OUT" \
            -y "$KEY" \
            -e -w; then
            
            echo "‚ö†Ô∏è  √âchec avec projectInfo.xml, tentative avec m√©thode alternative..."
            
            # M√©thode alternative : compilation directe avec manifest
            if ! java -Xms1g -Xmx2g -Dfile.encoding=UTF-8 -jar "$JAR" \
              -a "$PWD/api.db" \
              -b "$PWD/api.mir" \
              -d vivoactive4 \
              -f "$JUNGLE" \
              -o "$OUT" \
              -y "$KEY" \
              -e -w; then
              
              echo "‚ùå √âchec de compilation avec les deux m√©thodes"
              echo "üìã Informations de d√©bogage:"
              echo "  - JAR: $JAR ($(du -h "$JAR" | cut -f1))"
              echo "  - Project Info: $PINFO"
              echo "  - Jungle: $JUNGLE"
              echo "  - Key: pr√©sente ($(stat -c%s "$KEY") bytes)"
              echo "  - Manifest: $GITHUB_WORKSPACE/manifest.xml"
              
              echo "üìÑ Contenu de monkey.jungle:"
              cat "$JUNGLE"
              
              exit 1
            else
              echo "‚úÖ Compilation r√©ussie avec la m√©thode alternative!"
            fi
          else
            echo "‚úÖ Compilation r√©ussie avec projectInfo.xml!"
          fi
          
          # V√©rification du fichier de sortie
          if [[ ! -f "$OUT" ]]; then
            echo "‚ùå Le fichier .iq n'a pas √©t√© g√©n√©r√©"
            exit 1
          fi
          
          file_size=$(stat -c%s "$OUT")
          echo "‚úÖ Application compil√©e avec succ√®s!"
          echo "üì¶ Fichier g√©n√©r√©: $OUT ($(numfmt --to=iec-i --suffix=B $file_size))"
        working-directory: tools
        run: |
          set -euo pipefail
          
          echo "üîç Diagnostic du projectInfo.xml g√©n√©r√©:"
          echo "üìè Taille: $(stat -c%s projectInfo.xml) bytes"
          echo "üìÑ Contenu:"
          cat -n projectInfo.xml
          echo ""
          echo "üß™ Test de parsing avec monkeybrains en mode verbose..."
        working-directory: tools
        run: |
          set -euxo pipefail
          
          echo "üî® Compilation de l'application Connect IQ..."
          
          # Variables pour les chemins
          JAR="$PWD/monkeybrains-8.1.1.jar"
          PINFO="$PWD/projectInfo.xml"
          JUNGLE="$GITHUB_WORKSPACE/monkey.jungle"
          OUT="$GITHUB_WORKSPACE/bin/${OUTPUT_NAME}.iq"
          KEY="$GITHUB_WORKSPACE/developer_key"
          
          # V√©rification finale des fichiers requis
          required_files=("$JAR" "$PINFO" "$PWD/api.db" "$PWD/api.mir" "$PWD/compilerInfo.xml" "$KEY" "$JUNGLE")
          for file in "${required_files[@]}"; do
            if [[ ! -s "$file" ]]; then
              echo "‚ùå Fichier requis manquant ou vide: $file"
              exit 1
            fi
          done
          
          # Compilation avec gestion d'erreur am√©lior√©e
          echo "üöÄ D√©marrage de la compilation..."
          
          if ! java -Xms1g -Xmx2g -Dfile.encoding=UTF-8 -jar "$JAR" \
            -a "$PWD/api.db" \
            -b "$PWD/api.mir" \
            -p "$PINFO" \
            -f "$JUNGLE" \
            -o "$OUT" \
            -y "$KEY" \
            -e -w; then
            
            echo "‚ùå √âchec de la compilation"
            echo "üìã Informations de d√©bogage:"
            echo "  - JAR: $JAR ($(du -h "$JAR" | cut -f1))"
            echo "  - Project Info: $PINFO"
            echo "  - Jungle: $JUNGLE"
            echo "  - Key: pr√©sente ($(stat -c%s "$KEY") bytes)"
            
            exit 1
          fi
          
          # V√©rification du fichier de sortie
          if [[ ! -f "$OUT" ]]; then
            echo "‚ùå Le fichier .iq n'a pas √©t√© g√©n√©r√©"
            exit 1
          fi
          
          file_size=$(stat -c%s "$OUT")
          echo "‚úÖ Application compil√©e avec succ√®s!"
          echo "üì¶ Fichier g√©n√©r√©: $OUT ($(numfmt --to=iec-i --suffix=B $file_size))"

      - name: Validate generated .iq file
        run: |
          set -euo pipefail
          
          iq_file="bin/${OUTPUT_NAME}.iq"
          
          if [[ ! -f "$iq_file" ]]; then
            echo "‚ùå Fichier .iq non trouv√©: $iq_file"
            exit 1
          fi
          
          # V√©rifier que c'est un fichier ZIP valide (les .iq sont des archives ZIP)
          if ! file "$iq_file" | grep -q -i zip; then
            echo "‚ùå Le fichier .iq ne semble pas √™tre une archive valide"
            file "$iq_file"
            exit 1
          fi
          
          # V√©rifications suppl√©mentaires
          file_size=$(stat -c%s "$iq_file")
          
          if (( file_size < 1024 )); then
            echo "‚ùå Le fichier .iq semble trop petit ($file_size bytes)"
            exit 1
          fi
          
          echo "‚úÖ Fichier .iq valid√©:"
          echo "  - Taille: $(numfmt --to=iec-i --suffix=B $file_size)"
          echo "  - Type: $(file -b "$iq_file")"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: bin/*.iq
          retention-days: 30
          if-no-files-found: error

      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.run_number }}
          path: |
            manifest.xml.backup
            monkey.jungle
            tools/projectInfo.xml
            bin/
          retention-days: 7
          if-no-files-found: ignore
