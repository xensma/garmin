name: CIQ Build

on:
  workflow_dispatch:
  push:
    paths:
      - "source/**"
      - "resources/**"
      - "manifest.xml"
      - "tools/**"
      - ".github/workflows/ciq-build.yml"
  pull_request:
    paths:
      - "source/**"
      - "resources/**"
      - "manifest.xml"
      - "tools/**"

permissions:
  contents: read
  actions: read
  checks: write

env:
  JAVA_VERSION: "17"
  MIN_SDK_VERSION: "3.1.0"
  OUTPUT_NAME: "OWSwim_VA4"
  SUPPORTED_DEVICES: "vivoactive4,vivoactive4s"
  COMPILER_VERSION: "8.1.1"
  BUILD_MEMORY: "-Xms1g -Xmx2g"

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required files
        run: |
          set -euo pipefail
          required_files=(
            "manifest.xml"
            "tools/monkeybrains-${COMPILER_VERSION}.jar"
            "tools/api.db"
            "tools/api.mir"
            "tools/compilerInfo.xml"
          )
          missing=()
          for f in "${required_files[@]}"; do
            [[ -f "$f" ]] || missing+=("$f")
          done
          if ((${#missing[@]})); then
            echo "‚ùå Fichiers manquants:"; printf "  - %s\n" "${missing[@]}"; exit 1
          fi
          echo "‚úÖ Tous les fichiers requis sont pr√©sents"

      - name: Validate manifest.xml syntax
        run: |
          python3 - <<'PY'
import sys, xml.etree.ElementTree as ET
try:
    ET.parse('manifest.xml')
    print('‚úÖ manifest.xml est valide')
except ET.ParseError as e:
    print(f'‚ùå manifest.xml invalide: {e}'); sys.exit(1)
PY

  build:
    name: Build Connect IQ Application
    runs-on: ubuntu-latest
    needs: validate
    defaults: { run: { shell: bash } }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: ${{ env.JAVA_VERSION }} }

      - name: Cache Connect IQ tools
        uses: actions/cache@v4
        with:
          path: tools/
          key: ciq-tools-${{ env.COMPILER_VERSION }}-${{ hashFiles('tools/*.jar', 'tools/*.db', 'tools/*.mir', 'tools/*.xml') }}
          restore-keys: |
            ciq-tools-${{ env.COMPILER_VERSION }}-
            ciq-tools-

      - name: Normalize file encodings
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          files=(manifest.xml resources/**/*.xml source/**/*.mc)
          for f in "${files[@]}"; do
            [[ -f "$f" ]] || continue
            awk 'NR==1{sub(/^\xef\xbb\xbf/,"")}1' "$f" > "$f.tmp" && \
            cmp -s "$f" "$f.tmp" || mv "$f.tmp" "$f"
            [[ -f "$f.tmp" ]] && rm -f "$f.tmp"
          done
          echo "‚úÖ Normalisation OK"

      - name: Generate monkey.jungle
        run: |
          set -euo pipefail
          cat > monkey.jungle <<EOF
project.manifest = manifest.xml
base.sourcePath = source
base.resourcePath = resources
EOF
          mkdir -p bin
          echo "‚úÖ monkey.jungle cr√©√©"; cat monkey.jungle

      - name: Setup developer key
        env: { CIQ_DEV_KEY_B64: ${{ secrets.CIQ_DEV_KEY_B64 }} }
        run: |
          set -euo pipefail
          [[ -n "${CIQ_DEV_KEY_B64:-}" ]] || { echo "‚ùå Secret CIQ_DEV_KEY_B64 manquant"; exit 1; }
          echo "$CIQ_DEV_KEY_B64" | base64 -d > developer_key
          chmod 600 developer_key
          test -s developer_key && echo "‚úÖ Cl√© dev OK"

      - name: Configure manifest for target devices
        run: |
          set -euo pipefail
          sed -i 's/minSdkVersion="[^"]*"/minSdkVersion="'${MIN_SDK_VERSION}'"/' manifest.xml
          devices_xml=""
          IFS=',' read -ra DEV <<< "$SUPPORTED_DEVICES"
          for d in "${DEV[@]}"; do devices_xml+="<iq:product id=\"$d\"/>"; done
          perl -0777 -pe "s|<iq:products>.*?</iq:products>|<iq:products>${devices_xml}</iq:products>|s" -i manifest.xml
          grep -n 'vivoactive4' manifest.xml || true
          echo "‚úÖ manifest.xml patch√© pour ${SUPPORTED_DEVICES}"

      - name: Build Connect IQ application (no -d / no -u / no -p)
        working-directory: tools
        run: |
          set -euxo pipefail
          JAR="$PWD/monkeybrains-${COMPILER_VERSION}.jar"
          ADB="$PWD/api.db"
          AMIR="$PWD/api.mir"
          CINFO="$PWD/compilerInfo.xml"
          JUNGLE="$GITHUB_WORKSPACE/monkey.jungle"
          OUT="$GITHUB_WORKSPACE/bin/${OUTPUT_NAME}.iq"
          KEY="$GITHUB_WORKSPACE/developer_key"

          for f in "$JAR" "$ADB" "$AMIR" "$CINFO" "$KEY" "$JUNGLE"; do test -s "$f"; done

          echo "üöÄ Compilation directe via jungle/manifest‚Ä¶"
          java $BUILD_MEMORY -Dfile.encoding=UTF-8 -jar "$JAR" \
            -a "$ADB" -b "$AMIR" \
            -f "$JUNGLE" \
            -o "$OUT" \
            -y "$KEY" \
            -e -w

      - name: Validate generated .iq file
        run: |
          set -euo pipefail
          iq="bin/${OUTPUT_NAME}.iq"
          [[ -f "$iq" ]] || { echo "‚ùå .iq non g√©n√©r√©"; exit 1; }
          file "$iq" | grep -qi zip || { echo "‚ùå .iq non-zip"; exit 1; }
          unzip -t "$iq" >/dev/null
          echo "‚úÖ .iq OK ($(numfmt --to=iec-i --suffix=B "$(stat -c%s "$iq")"))"

      - name: Cleanup developer key
        if: always()
        run: |
          [[ -f developer_key ]] && shred -vfz -n 3 developer_key || true
          echo "üîí Cl√© dev nettoy√©e"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: bin/*.iq
          retention-days: 30
          if-no-files-found: error

      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.run_number }}
          path: |
            manifest.xml
            monkey.jungle
            bin/
          retention-days: 7
          if-no-files-found: ignore
