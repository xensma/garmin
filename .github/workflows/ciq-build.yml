name: CIQ Build

on:
  workflow_dispatch:
  push:
    paths:
      - "source/**"
      - "resources/**"
      - "manifest.xml"
      - "tools/**"
      - ".github/workflows/ciq-build.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Normaliser encodages + créer jungle minimal
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          files=(manifest.xml resources/**/*.xml source/**/*.mc)
          for f in "${files[@]}"; do
            [ -f "$f" ] || continue
            awk 'NR==1{sub(/^\xef\xbb\xbf/,"")}1' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
          done
          printf 'project.manifest = manifest.xml\nbase.sourcePath = source\nbase.resourcePath = resources\n' > monkey.jungle
          mkdir -p bin

      - name: Déposer la developer_key (depuis le secret)
        shell: bash
        env:
          CIQ_DEV_KEY_B64: ${{ secrets.CIQ_DEV_KEY_B64 }}
        run: |
          set -euo pipefail
          echo "$CIQ_DEV_KEY_B64" | base64 -d > developer_key
          chmod 600 developer_key
          test -s developer_key

      - name: Forcer compat vívoactive 4/4s dans le manifest
        shell: bash
        run: |
          set -euo pipefail
          sed -i 's/minSdkVersion="[^"]*"/minSdkVersion="3.1.0"/' manifest.xml
          perl -0777 -pe 's|<iq:products>.*?</iq:products>|<iq:products><iq:product id="vivoactive4"/><iq:product id="vivoactive4s"/></iq:products>|s' -i manifest.xml
          grep -n 'vivoactive4' manifest.xml || true

      # Assurer que projectInfo.xml contient les bons products (et créer minimal si absent)
      - name: Garantir les products dans tools/projectInfo.xml
        shell: bash
        working-directory: tools
        run: |
          set -euo pipefail
          if [ ! -s projectInfo.xml ]; then
            cat > projectInfo.xml <<'XML'
<?xml version="1.0" encoding="UTF-8"?>
<iq:projectInfo xmlns:iq="http://www.garmin.com/xml/connectiq">
  <iq:application>
    <iq:products>
      <iq:product id="vivoactive4"/>
      <iq:product id="vivoactive4s"/>
    </iq:products>
  </iq:application>
</iq:projectInfo>
XML
          else
            # Injecter les products s'ils manquent
            if ! grep -q 'product id="vivoactive4"' projectInfo.xml; then
              perl -0777 -pe 's|<iq:products>|<iq:products>\n      <iq:product id="vivoactive4"/>|s' -i projectInfo.xml
            fi
            if ! grep -q 'product id="vivoactive4s"' projectInfo.xml; then
              perl -0777 -pe 's|<iq:products>|<iq:products>\n      <iq:product id="vivoactive4s"/>|s' -i projectInfo.xml
            fi
          fi
          echo "=== projectInfo.xml ==="
          sed -n '1,120p' projectInfo.xml

      - name: Build .iq (via projectInfo.xml, sans -d / sans -u)
        working-directory: tools
        shell: bash
        run: |
          set -euxo pipefail
          ls -l
          ADB="$PWD/api.db"
          AMIR="$PWD/api.mir"
          JAR="$PWD/monkeybrains-8.1.1.jar"
          PINFO="$PWD/projectInfo.xml"
          JUNGLE="$GITHUB_WORKSPACE/monkey.jungle"
          OUT="$GITHUB_WORKSPACE/bin/OWSwim_VA4.iq"
          KEY="$GITHUB_WORKSPACE/developer_key"

          test -s "$ADB" && test -s "$AMIR" && test -s "$JAR" && test -s "$PINFO"

          # Compilation sans -d et sans -u : les devices viennent de projectInfo.xml
          java -Xms1g -Dfile.encoding=UTF-8 -jar "$JAR" \
            -a "$ADB" -b "$AMIR" -p "$PINFO" \
            -f "$JUNGLE" -o "$OUT" -y "$KEY" \
            -e -w

      - name: Artifact
        uses: actions/upload-artifact@v4
        with:
          name: OWSwim_VA4
          path: bin/*.iq
